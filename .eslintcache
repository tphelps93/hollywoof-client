[{"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\index.js":"1","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\App.js":"2","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\reportWebVitals.js":"3","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\contexts\\DataContext.js":"4","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Header\\Header.js":"5","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Details\\Details.js":"6","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Login\\Login.js":"7","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\ReportForm\\ReportForm.js":"8","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\LandingPage\\LandingPage.js":"9","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Registration\\Registration.js":"10","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Main\\Main.js":"11","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\omdb-service.js":"12","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\config.js":"13","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\api-service.js":"14","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\token-service.js":"15","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\auth-api-service.js":"16","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\TSForm\\TSForm.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":4757,"mtime":1610207969755,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":604,"mtime":1610205820918,"results":"22","hashOfConfig":"19"},{"size":1324,"mtime":1610219705702,"results":"23","hashOfConfig":"19"},{"size":7873,"mtime":1610208773127,"results":"24","hashOfConfig":"19"},{"size":2053,"mtime":1610219294926,"results":"25","hashOfConfig":"19"},{"size":922,"mtime":1609361363722,"results":"26","hashOfConfig":"19"},{"size":2095,"mtime":1610315593272,"results":"27","hashOfConfig":"19"},{"size":2387,"mtime":1610219229265,"results":"28","hashOfConfig":"19"},{"size":5441,"mtime":1610220509002,"results":"29","hashOfConfig":"19"},{"size":558,"mtime":1609876491328,"results":"30","hashOfConfig":"19"},{"size":236,"mtime":1609703790148,"results":"31","hashOfConfig":"19"},{"size":4398,"mtime":1610205508651,"results":"32","hashOfConfig":"19"},{"size":734,"mtime":1609771854952,"results":"33","hashOfConfig":"19"},{"size":424,"mtime":1609768311551,"results":"34","hashOfConfig":"19"},{"size":2812,"mtime":1610208567011,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"vzh12l",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\index.js",[],["78","79"],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\App.js",["80","81"],"// Dependency Imports\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// Context Imports\nimport DataContext from './contexts/DataContext';\n// API Service Imports\nimport { fetchTimestamps, fetchBarks } from './services/api-service';\n\n// Component Imports\nimport Header from './Components/Header/Header';\nimport LandingPage from './Components/LandingPage/LandingPage';\nimport Registration from './Components/Registration/Registration';\nimport Login from './Components/Login/Login';\nimport Main from './Components/Main/Main';\nimport Details from './Components/Details/Details';\nimport TSForm from './Components/TSForm/TSForm';\n// CSS Imports\nimport './App.css';\n\nexport default class App extends Component {\n  state = {\n    search: '',\n    movies: [],\n    shows: [],\n    barks: [],\n    timestamps: [],\n    totalResults: 0,\n    authToken: null,\n    error: null,\n  };\n\n  componentDidMount() {\n    let promises = [fetchTimestamps(), fetchBarks()];\n    Promise.all(promises)\n      .then(values => {\n        this.setState({\n          timestamps: values[0],\n          barks: values[1],\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error,\n        });\n      });\n  }\n\n  /* Add To State */\n\n  // Add To 'movies' Array\n  addMovies = newMovies => {\n    this.setState({\n      movies: [...this.state.movies, newMovies],\n    });\n  };\n\n  // Add To 'shows' Array\n  addShows = newShows => {\n    this.setState({\n      shows: [...this.state.shows, newShows],\n    });\n  };\n\n  // Add To 'timestamps' Array\n  addTimestamps = newTimestamp => {\n    this.setState({\n      timestamps: [...this.state.timestamps, newTimestamp],\n    });\n  };\n\n  /* Update State */\n\n  iterateConfirmations = id => {\n    this.setState({\n      timestamps: this.state.timestamps.map(timestamp => {\n        return timestamp.ts_id === id\n          ? { ...timestamp, confirmations: timestamp.confirmations + 1 }\n          : timestamp;\n      }),\n    });\n  };\n\n  iterateLikes = id => {\n    this.setState({\n      timestamps: this.state.timestamps.map(timestamp => {\n        return timestamp.ts_id === id\n          ? { ...timestamp, likes: timestamp.likes + 1 }\n          : timestamp;\n      }),\n    });\n  };\n\n  updateBarkStatus = id => {\n    this.setState({\n      barks: this.state.barks.map(b => {\n        return b.bark_id === id ? { ...b, barks: (b.barks = 'Yes') } : b;\n      }),\n    });\n  };\n\n  iterateDislikes = id => {\n    this.setState({\n      timestamps: this.state.timestamps.map(timestamp => {\n        return timestamp.ts_id === id\n          ? { ...timestamp, dislikes: timestamp.dislikes + 1 }\n          : timestamp;\n      }),\n    });\n  };\n\n  updateMovieTotalResults = totalResults => {\n    this.setState({\n      totalResults: this.state.movies,\n      totalResults,\n    });\n  };\n\n  updateShowsTotalResults = totalResults => {\n    this.setState({\n      totalResults: (this.state.shows.totalResults = totalResults),\n    });\n  };\n\n  /* Reset State */\n\n  resetList = () => {\n    this.setState({\n      movies: [],\n      shows: [],\n    });\n  };\n\n  /* Auth Token Functions */\n\n  setAuthToken = authToken => {\n    this.setState({\n      authToken: authToken,\n    });\n  };\n\n  clearAuthToken = () => {\n    this.setState({\n      authToken: null,\n    });\n  };\n\n  render() {\n    const value = {\n      search: this.state.search,\n      movies: this.state.movies,\n      shows: this.state.shows,\n      timestamps: this.state.timestamps,\n      totalResults: this.state.totalResults,\n      barks: this.state.barks,\n      authToken: this.state.authToken,\n      addMovies: this.addMovies,\n      addShows: this.addShows,\n      addTimestamps: this.addTimestamps,\n      iterateConfirmations: this.iterateConfirmations,\n      iterateLikes: this.iterateLikes,\n      iterateDislikes: this.iterateDislikes,\n      updateMovieTotalResults: this.updateMovieTotalResults,\n      updateShowsTotalResults: this.updateShowsTotalResults,\n      updateBarkStatus: this.updateBarkStatus,\n      resetList: this.resetList,\n      setAuthToken: this.setAuthToken,\n      clearAuthToken: this.clearAuthToken,\n    };\n    return (\n      <Router>\n        <div className='App'>\n          <div className='glass-layer'>\n            <DataContext.Provider value={value}>\n              <Header />\n              <Route exact path='/' component={LandingPage} />\n              <Route path='/main' component={Main} />\n              <Route path='/register' component={Registration} />\n              <Route path='/login' component={Login} />\n              <Route path='/details/:imdbID' component={Details} />\n              <Route path='/tsform/:imdbID' component={TSForm} />\n            </DataContext.Provider>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\reportWebVitals.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\contexts\\DataContext.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Header\\Header.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Details\\Details.js",["82","83","84","85"],"// Dependency Imports\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// Context Imports\r\nimport DataContext from '../../contexts/DataContext';\r\n// API Service Imports\r\nimport {\r\n  fetchUsers,\r\n  updateConfirmationCount,\r\n  updateLikeCount,\r\n  updateDislikeCount,\r\n  updateBarkStatus,\r\n} from '../../services/api-service';\r\nimport TokenService from '../../services/token-service';\r\n// CSS Imports\r\nimport './Details.css';\r\n\r\nexport default class Details extends Component {\r\n  state = { error: null, expanded: [], username: '' };\r\n  static contextType = DataContext;\r\n\r\n  // already getting the userid\r\n  // take that userid as a parameter\r\n  // do a get request to the backend\r\n  // check if the userid passed in matches a userid on the backend\r\n  // if yes, pull it from the username from the backend\r\n\r\n  // async getUserName(userid) {\r\n  //   try {\r\n  //     const resp = await fetchUsers();\r\n  //     let user = resp.find(user => {\r\n  //       return user.user_id === userid;\r\n  //     });\r\n  //     console.log(user);\r\n  //     console.log(user.user_name);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  // async getUserName = userid => {\r\n  //   let user = fetchUsers().then(users => {\r\n  //     return users.find(user => {\r\n  //       return user.user_id === userid;\r\n  //     });\r\n  //   });\r\n  //   console.log(user.user_name);\r\n  //   return <p>{user && user.user_name}</p>\r\n  // };\r\n\r\n  toggleComment = ts_id => {\r\n    let expanded = [...this.state.expanded];\r\n    if (this.state.expanded.includes(ts_id)) {\r\n      expanded = expanded.filter(exp => {\r\n        return exp !== ts_id;\r\n      });\r\n    } else {\r\n      expanded.push(ts_id);\r\n    }\r\n    this.setState({\r\n      expanded,\r\n    });\r\n  };\r\n\r\n  tsExpanded = ts => {\r\n    return (\r\n      <tr key={ts.ts_id} name='comment' className='container'>\r\n        {/* <th>{this.getUserName(ts.userid)}</th> */}\r\n        <th>\r\n          <h5>{ts.comment}</h5>\r\n        </th>\r\n        <th>\r\n          <button onClick={() => this.handleLikeClick(ts.ts_id, ts.likes)}>\r\n            {' '}\r\n            Like{' '}\r\n          </button>{' '}\r\n          <span name='likes'> {ts.likes}</span>\r\n          <button\r\n            onClick={() => this.handleDislikeClick(ts.ts_id, ts.dislikes)}\r\n          >\r\n            {' '}\r\n            Dislike\r\n          </button>{' '}\r\n          <span name='dislikes'> {ts.dislikes} </span>\r\n        </th>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  renderElement = () => {\r\n    const barks = this.context.barks;\r\n    let element = <p> Dog Barks: Not Reported </p>;\r\n    for (let i = 0; i < barks.length; i++) {\r\n      if (barks[i].media_id === this.props.match.params.imdbID) {\r\n        element = (\r\n          <p>\r\n            Dog Barks: <span id='barks'>{barks[i].barks}</span>\r\n            <button\r\n              onClick={() =>\r\n                this.handleUpdateBarkStatus(barks[i].bark_id, barks[i].barks)\r\n              }\r\n            >\r\n              Test\r\n            </button>\r\n          </p>\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  };\r\n\r\n  handleUpdateBarkStatus = (id, input) => {\r\n    const barks = this.context.barks;\r\n    for (let i = 0; i < barks.length; i++) {\r\n      if (barks[i].media_id === this.props.match.params.imdbID) {\r\n        updateBarkStatus(id, input);\r\n        this.context.updateBarkStatus(id);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleLikeClick = (ts_id, likes) => {\r\n    const userid = TokenService.jwtDecode(TokenService.getAuthToken()).payload\r\n      .user_id;\r\n    updateLikeCount(ts_id, likes, userid);\r\n    this.context.iterateLikes(ts_id);\r\n  };\r\n\r\n  handleDislikeClick = (ts_id, dislikes) => {\r\n    const userid = TokenService.jwtDecode(TokenService.getAuthToken()).payload\r\n      .user_id;\r\n    updateDislikeCount(ts_id, dislikes, userid);\r\n    this.context.iterateDislikes(ts_id);\r\n  };\r\n\r\n  handleConfirmationClick = (ts_id, confirmations) => {\r\n    const userid = TokenService.jwtDecode(TokenService.getAuthToken()).payload\r\n      .user_id;\r\n    updateConfirmationCount(ts_id, confirmations, userid);\r\n    this.context.iterateConfirmations(ts_id);\r\n  };\r\n\r\n  render() {\r\n    const timestamps = this.context.timestamps;\r\n    const movies = this.context.movies[0];\r\n    const shows = this.context.shows[0];\r\n\r\n    let renderTimestamps;\r\n    if (timestamps) {\r\n      renderTimestamps = timestamps\r\n        .filter(ts => {\r\n          return ts.media_id == this.props.match.params.imdbID;\r\n        })\r\n        .map(ts => {\r\n          return (\r\n            <tbody key={ts.ts_id}>\r\n              <tr className='container'>\r\n                <th onClick={() => this.toggleComment(ts.ts_id)}>\r\n                  {' '}\r\n                  {ts.timestamp}{' '}\r\n                </th>\r\n                <th> {ts.volume} </th>\r\n                <th>\r\n                  {TokenService.getAuthToken() ? (\r\n                    <button\r\n                      onClick={() =>\r\n                        this.handleConfirmationClick(ts.ts_id, ts.confirmations)\r\n                      }\r\n                    >\r\n                      🐾\r\n                    </button>\r\n                  ) : null}\r\n\r\n                  {ts.confirmations}\r\n                </th>\r\n              </tr>\r\n              {this.state.expanded.includes(ts.ts_id)\r\n                ? this.tsExpanded(ts)\r\n                : ''}\r\n              <div className='delete-ts-container'>\r\n                <button className='delete-ts-btn'> Delete </button>\r\n              </div>\r\n            </tbody>\r\n          );\r\n        });\r\n    }\r\n\r\n    let renderDetails;\r\n    if (movies) {\r\n      renderDetails = movies\r\n        .filter(movie => {\r\n          return movie.imdbID == this.props.match.params.imdbID;\r\n        })\r\n        .map(movie => {\r\n          return (\r\n            <div key={movie.imdbID} className='movie-info'>\r\n              {/* If movie poster is null return a placeholder image */}\r\n              {movie.Poster === 'N/A' ? (\r\n                <img\r\n                  src='https://www.gaithersburgdental.com/wp-content/uploads/2016/10/orionthemes-placeholder-image.png'\r\n                  alt='movie poster'\r\n                ></img>\r\n              ) : (\r\n                <img src={`${movie.Poster}`} alt='movie poster'></img>\r\n              )}\r\n              <h3> {movie.Title} </h3>\r\n              <p> Release Date: {movie.Year} </p>\r\n              {this.renderElement()}\r\n              <Link to='/main'>\r\n                <button> Back </button>\r\n              </Link>\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n\r\n    if (shows) {\r\n      renderDetails = shows\r\n        .filter(show => {\r\n          return show.imdbID == this.props.match.params.imdbID;\r\n        })\r\n        .map(show => {\r\n          return (\r\n            <div key={show.imdbID} className='movie-info'>\r\n              <img\r\n                src={`${\r\n                  !show.Poster\r\n                    ? 'https://www.gaithersburgdental.com/wp-content/uploads/2016/10/orionthemes-placeholder-image.png'\r\n                    : show.Poster\r\n                }`}\r\n                alt='movie poster'\r\n              ></img>\r\n              <h3> {show.Title} </h3>\r\n              <p> Release Date: {show.Year} </p>\r\n              {this.renderElement()}\r\n              <Link to='/main'>\r\n                <button> Back </button>\r\n              </Link>\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n    return (\r\n      <div className='details-page'>\r\n        <div className='details'>{renderDetails}</div>\r\n\r\n        <table width='90%' id='table' className='detail-table'>\r\n          <caption>Time Stamps</caption>\r\n          <thead>\r\n            <tr>\r\n              <th> Timestamp </th>\r\n              <th> Volume </th>\r\n              <th> Confirmed </th>\r\n            </tr>\r\n          </thead>\r\n          {renderTimestamps}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Login\\Login.js",["86"],"// Dependency Imports\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// API Service Imports\r\nimport TokenService from '../../services/token-service';\r\nimport AuthApiService from '../../services/auth-api-service';\r\nimport DataContext from '../../contexts/DataContext';\r\n// CSS Imports\r\nimport './Login.css';\r\n\r\nexport default class Login extends Component {\r\n  state = { error: null };\r\n  static contextType = DataContext;\r\n\r\n  handleSubmitJwtAuth = e => {\r\n    e.preventDefault();\r\n    this.setState({ error: null });\r\n    const { user_name, password } = e.target;\r\n\r\n    AuthApiService.postLogin({\r\n      user_name: user_name.value,\r\n      password: password.value,\r\n    })\r\n      .then(res => {\r\n        user_name.value = '';\r\n        password.value = '';\r\n        TokenService.saveAuthToken(res.authToken);\r\n        this.context.setAuthToken(res.authToken);\r\n      })\r\n      .then(() => {\r\n        this.props.history.push('/main');\r\n      })\r\n      .catch(res => {\r\n        this.setState({ error: 'Incorrect username or password.' });\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className='login'>\r\n        <div className='login-content'>\r\n          <h1> Login to Hollywoof </h1>\r\n          <h3>...continue informing others to save someone's evening.</h3>\r\n        </div>\r\n        <div className='login-form'>\r\n          <form onSubmit={this.handleSubmitJwtAuth}>\r\n              <input\r\n                type='text'\r\n                name='user_name'\r\n                placeholder='username'\r\n              ></input>\r\n              <input\r\n                type='password'\r\n                name='password'\r\n                placeholder='password'\r\n              ></input>\r\n            <button type='submit'> Submit </button>\r\n            <p> Don't have an account? <Link style={{textDecoration:'none'}} to='/register'><a> Register Here </a> </Link></p>\r\n\r\n            <div style={{ color: 'red', fontSize: 10 }}>{this.state.error}</div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\ReportForm\\ReportForm.js",[],["87","88"],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\LandingPage\\LandingPage.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Registration\\Registration.js",["89"],"// Dependency Imports\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n// API Imports\r\nimport { postUser } from '../../services/api-service';\r\n// CSS Imports\r\nimport './Registration.css';\r\n\r\nexport default class Registration extends Component {\r\n  handleChange = event => {\r\n    const isCheckbox = event.target.type === 'checkbox';\r\n    this.setState({\r\n      [event.target.name]: isCheckbox\r\n        ? event.target.checked\r\n        : event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name } = e.target;\r\n    const { user_name } = e.target;\r\n    const { password } = e.target;\r\n    postUser(name.value, user_name.value, password.value)\r\n      .then(() => {\r\n        name.value = '';\r\n        user_name.value = '';\r\n        password.value = '';\r\n      })\r\n      .then(() => {\r\n        this.props.history.push('/main');\r\n      })\r\n      .catch(this.context.setError);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className='register'>\r\n        <div className='register-content'>\r\n          <h1> Register to Hollywoof </h1>\r\n          <h3> You'll have access to...</h3>\r\n          <ul>\r\n            <li>\r\n              {' '}\r\n              - Reporting in if you find a movie or show with a barking dog\r\n            </li>\r\n            <li> - Adding timestamps</li>\r\n            <li> - Setting the volume of the particular occurrence</li>\r\n            <li> - Confirming others'reports</li>\r\n          </ul>\r\n        </div>\r\n        <div className='register-form'>\r\n          <form onSubmit={e => this.handleSubmit(e)}>\r\n            <input\r\n              onChange={this.handleChange}\r\n              type='text'\r\n              name='name'\r\n              placeholder='name'\r\n            ></input>\r\n\r\n            <input\r\n              onChange={this.handleChange}\r\n              type='text'\r\n              name='user_name'\r\n              placeholder='username'\r\n            ></input>\r\n            <input\r\n              onChange={this.handleChange}\r\n              name='password'\r\n              type='password'\r\n              placeholder='password'\r\n            ></input>\r\n            <button type='submit'> Submit </button>\r\n            <p> Already registered? <Link style={{textDecoration:'none'}} to='/login'><a> Login Here </a> </Link></p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\Main\\Main.js",["90"],"// Dependency Imports\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// Context Imports\r\nimport DataContext from '../../contexts/DataContext';\r\n// API Service Imports\r\nimport { fetchMovies, fetchShows } from '../../services/omdb-service';\r\nimport TokenService from '../../services/token-service';\r\n// CSS Imports\r\nimport './Main.css';\r\n\r\n/* TODO \r\n  Break into smaller components\r\n   1. Filter\r\n   2. Table\r\n    */\r\n\r\nexport default class Main extends Component {\r\n  state = {\r\n    title: '',\r\n    filter: '',\r\n    page: 1,\r\n    totalResults: 0,\r\n    isSubmitting: false,\r\n  };\r\n  static contextType = DataContext;\r\n\r\n  handleChange = event => {\r\n    const isCheckbox = event.target.type === 'checkbox';\r\n    this.setState({\r\n      [event.target.name]: isCheckbox\r\n        ? event.target.checked\r\n        : event.target.value,\r\n    });\r\n  };\r\n\r\n  renderBarkStatus = imdbID => {\r\n    const barks = this.context.barks;\r\n    let element = <th> Not Reported </th>;\r\n    barks\r\n      .filter(b => {\r\n        return b.media_id === imdbID;\r\n      })\r\n      .map(b => {\r\n        element = <th> {b.barks} </th>;\r\n      });\r\n    return element;\r\n  };\r\n\r\n  handleSearch = e => {\r\n    e.preventDefault();\r\n    const { page } = e.target;\r\n    const { title } = e.target;\r\n    const { filter } = e.target;\r\n    this.context.resetList();\r\n    if (filter.value.toLowerCase() === 'movies') {\r\n      fetchMovies(title.value, page.value)\r\n        .then(movies => {\r\n          this.context.addMovies(movies.Search);\r\n          this.context.updateMovieTotalResults(movies.totalResults);\r\n        })\r\n        .then(() => {\r\n          this.setState({\r\n            isSubmitting: true,\r\n          });\r\n        });\r\n    }\r\n\r\n    if (filter.value.toLowerCase() === 'tv shows') {\r\n      fetchShows(title.value, page.value)\r\n        .then(shows => {\r\n          this.context.addShows(shows.Search);\r\n          this.setState({\r\n            totalResults: shows.totalResults,\r\n          });\r\n        })\r\n        .then(() => {\r\n          this.setState({\r\n            isSubmitting: true,\r\n          });\r\n        });\r\n    }\r\n  };\r\n  render() {\r\n    const movies = this.context.movies[0];\r\n    const shows = this.context.shows[0];\r\n\r\n    let renderList;\r\n    if (movies) {\r\n      renderList = movies.map(movie => {\r\n        return (\r\n          <tbody key={movie.imdbID} className='main-table'>\r\n            <tr>\r\n              <th>\r\n                <Link\r\n                  style={{ textDecoration: 'none', color: 'black' }}\r\n                  to={`/details/${movie.imdbID}`}\r\n                >\r\n                  {movie.Title}\r\n                </Link>\r\n              </th>\r\n\r\n              <th> {movie.Year} </th>\r\n              {this.renderBarkStatus(movie.imdbID)}\r\n\r\n              {TokenService.getAuthToken() ? (\r\n                <th>\r\n                  <Link to={`/tsform/${movie.imdbID}`}>\r\n                    <button> Report </button>\r\n                  </Link>\r\n                </th>\r\n              ) : null}\r\n            </tr>\r\n          </tbody>\r\n        );\r\n      });\r\n    }\r\n\r\n    if (shows) {\r\n      renderList = shows.map(show => {\r\n        return (\r\n          <tbody key={show.imdbID} className='main-table'>\r\n            <tr>\r\n              <th>\r\n                <Link\r\n                  style={{ textDecoration: 'none', color: 'black' }}\r\n                  to={`/details/${show.imdbID}`}\r\n                >\r\n                  {show.Title}\r\n                </Link>\r\n              </th>\r\n              <th> {show.Year} </th>\r\n              {this.renderBarkStatus(show.imdbID)}\r\n\r\n              {TokenService.getAuthToken() ? (\r\n                <th>\r\n                  <Link to={`/tsform/${show.imdbID}`}>\r\n                    <button> Report </button>\r\n                  </Link>\r\n                </th>\r\n              ) : null}\r\n            </tr>\r\n          </tbody>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className='main'>\r\n        <form onSubmit={e => this.handleSearch(e)} className='search'>\r\n          <div className='type-title'>\r\n            <select\r\n              onChange={this.handleChange}\r\n              name='filter'\r\n              value={this.state.filter}\r\n            >\r\n              <option> movies </option>\r\n              <option> tv shows </option>\r\n            </select>\r\n            <input\r\n              onChange={this.handleChange}\r\n              type='text'\r\n              name='title'\r\n              placeholder='title'\r\n              value={this.state.title}\r\n            ></input>\r\n          </div>\r\n          <input\r\n            className='page'\r\n            onChange={this.handleChange}\r\n            type='number'\r\n            name='page'\r\n            min='1'\r\n            max='10'\r\n            placeholder='page'\r\n            value={this.state.page}\r\n          ></input>\r\n          <button type='submit'> Submit </button>\r\n        </form>\r\n        <table width='90%' id='table' className='main-table'>\r\n          <caption>Search Results</caption>\r\n          <caption> Results: 10 of {this.context.totalResults}</caption>\r\n          <thead>\r\n            <tr>\r\n              <th> Title </th>\r\n              <th> Release Date </th>\r\n              <th> Barks </th>\r\n              {TokenService.getAuthToken() ? <th> Report </th> : null}\r\n            </tr>\r\n          </thead>\r\n          {renderList}\r\n          <tfoot></tfoot>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\omdb-service.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\config.js",["91"],"export default {\r\n  OMDB_API_URL:\r\n    process.env.OMDB_API_URL || 'http://www.omdbapi.com/?apikey=bd085d9a&s=',\r\n  API_BASE_URL: process.env.REACT_APP_BASE_URL || 'http://localhost:8000/api',\r\n  TOKEN_KEY: 'hw-client-auth-token',\r\n};\r\n","C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\api-service.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\token-service.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\services\\auth-api-service.js",[],"C:\\Users\\Taylor\\Desktop\\Github\\Capstones\\hollywoof\\hollywoof-client\\src\\Components\\TSForm\\TSForm.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":114,"column":7,"nodeType":"98","messageId":"99","endLine":114,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":120,"column":22,"nodeType":"102","endLine":120,"endColumn":38},{"ruleId":"103","severity":1,"message":"104","line":8,"column":3,"nodeType":"105","messageId":"106","endLine":8,"endColumn":13},{"ruleId":"107","severity":1,"message":"108","line":151,"column":30,"nodeType":"109","messageId":"99","endLine":151,"endColumn":32},{"ruleId":"107","severity":1,"message":"108","line":191,"column":31,"nodeType":"109","messageId":"99","endLine":191,"endColumn":33},{"ruleId":"107","severity":1,"message":"108","line":219,"column":30,"nodeType":"109","messageId":"99","endLine":219,"endColumn":32},{"ruleId":"110","severity":1,"message":"111","line":57,"column":93,"nodeType":"112","endLine":57,"endColumn":96},{"ruleId":"92","replacedBy":"113"},{"ruleId":"94","replacedBy":"114"},{"ruleId":"110","severity":1,"message":"111","line":73,"column":87,"nodeType":"112","endLine":73,"endColumn":90},{"ruleId":"115","severity":1,"message":"116","line":44,"column":14,"nodeType":"117","messageId":"118","endLine":44,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":1,"column":1,"nodeType":"121","endLine":6,"endColumn":3},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-dupe-keys","Duplicate key 'totalResults'.","ObjectExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'fetchUsers' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["122"],["123"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]